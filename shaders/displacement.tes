#version 410 core

#define offset 0.003
#define scale_factor 10

layout(triangles, equal_spacing, ccw) in;   //we set the parametere of the tessellation

in vec2 UVsCoord[];
out vec2 UVs;
in vec3 N[];
in vec3 T[];
in vec3 B[];
out vec3 normal_out;
out vec4 fragPos;   //position of the texel passed to the fragment shader

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 modelMatrix;
uniform mat3 normalMatrix;
uniform int repeat;

uniform float height_scale;
uniform sampler2D heightMap;

void main()
{   
    // build UV, normal, tangent, bitangent and position of the texel interpolating the values of its "father" fragment weighted according to the texel position inside it
    float u  = gl_TessCoord.x;
    float v  = gl_TessCoord.y;
    float w  = gl_TessCoord.z;

    vec2 texCoord = u * UVsCoord[0] + v * UVsCoord[1] + w * UVsCoord[2];
    texCoord = mod(texCoord * repeat, 1.0);

    vec4 pos0 = gl_in[0].gl_Position;
    vec4 pos1 = gl_in[1].gl_Position;
    vec4 pos2 = gl_in[2].gl_Position;

    vec4 pos = u * pos0 + v * pos1 + w * pos2;

    vec4 normal = normalize(vec4((u * N[0] + v * N[1] + w * N[2]), 0.0));
    vec4 tangent = normalize(vec4((u * T[0] + v * T[1] + w * T[2]), 0.0));
    vec4 bitangent = normalize(vec4((u * B[0] + v * B[1] + w * B[2]), 0.0));

    float height = texture(heightMap, texCoord).r * height_scale ;

    vec4 displacedPos = pos + normal * height;
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * displacedPos ;  //apply project-view-model transformations
    
    //perturbed normal computation
    float currentHeight = texture(heightMap, texCoord).r * height_scale;                 //we sample height at [x,y]
    float x1_Height = texture(heightMap, texCoord + vec2(offset, 0.0)).r * height_scale; //we sample height at [x+1,y]
    float y1_Height = texture(heightMap, texCoord + vec2(0.0, offset)).r * height_scale; //we sample height at [x,y+1] 

    float Bv = y1_Height - currentHeight;
    float Bu = x1_Height - currentHeight;

    vec3 new_normal = normalize(cross((bitangent.xyz + Bv * scale_factor * normal.xyz), (tangent.xyz + Bu * scale_factor* normal.xyz)));  // N' = B'x T' = (B + Bu*N) x (T + Bv*N)

    normal_out = normalize(normalMatrix * new_normal);
    UVs = texCoord; 
    fragPos = modelMatrix * displacedPos;

}
